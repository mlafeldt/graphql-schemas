schema {
  query: QueryRoot
  mutation: MutationRoot
}

interface Account {
  id: ID!
  slug: String!
  createdAt: DateTime!
  projects(after: String, before: String, first: Int, last: Int): ProjectConnection!
}

"""
Implement the DateTime scalar

The input/output is a string in RFC3339 format, with "Z" suffix instead of "+00:00"
Implementation is based on
[async_graphql::types::external::datetime](https://github.com/async-graphql/async-graphql/blob/5d03592d98f41ad00a792ff131304497e6161fa1/src/types/external/datetime.rs)
"""
scalar DateTime

"""Deployment"""
type Deployment {
  id: ID!

  """
  Project linked to this deployment
  Unimplemented
  """
  project: Project!
  commitMetadata: GitCommit!
  subdomain: String!
  branch: String!
  createdAt: DateTime!
  logEntries: [DeploymentLogEntry!]!
}

type DeploymentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeploymentEdge]
}

"""An edge in a connection."""
type DeploymentEdge {
  """The item at the end of the edge"""
  node: Deployment!

  """A cursor for use in pagination"""
  cursor: String!
}

type DeploymentLogEntry {
  createdAt: DateTime!
  message: String!
}

type Environment {
  id: ID!
  name: EnvironmentKind!
  createdAt: DateTime!
  environmentVariables: [EnvironmentVariable!]!
}

type EnvironmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EnvironmentEdge]
}

"""An edge in a connection."""
type EnvironmentEdge {
  """The item at the end of the edge"""
  node: Environment!

  """A cursor for use in pagination"""
  cursor: String!
}

enum EnvironmentKind {
  PREVIEW
  PRODUCTION
}

type EnvironmentVariable {
  id: ID!
  key: String!
  value: String!
  createdAt: DateTime!
}

input EnvironmentVariableCreateInput {
  environmentId: ID!

  """Must not be already assigned."""
  key: String!

  """Must not start with `GRAFBASE_`."""
  value: String!
}

type EnvironmentVariableCreatePayload {
  environmentVariable: EnvironmentVariable!
  query: QueryRoot!
}

input EnvironmentVariableDeleteInput {
  id: ID!
}

type EnvironmentVariableDeletePayload {
  deletedId: ID!
  query: QueryRoot!
}

input EnvironmentVariableUpdateInput {
  id: ID!

  """Must not be already assigned."""
  key: String!

  """Must not start with `GRAFBASE_`."""
  value: String!
}

type EnvironmentVariableUpdatePayload {
  environmentVariable: EnvironmentVariable!
  query: QueryRoot!
}

type GitAccount {
  provider: GitProvider!
  id: ID!
  slug: String!
}

type GitCommit {
  commitSha: String!
}

enum GitProvider {
  GITHUB
}

type GitRepository {
  provider: GitProvider!
  gitUrl: String!
}

input GitRepositoryInput {
  provider: GitProvider!
  gitUrl: String!
}

type Invite {
  id: ID!
  status: InviteStatus!
  createdAt: DateTime!
}

type InviteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InviteEdge]
}

"""An edge in a connection."""
type InviteEdge {
  """The item at the end of the edge"""
  node: Invite!

  """A cursor for use in pagination"""
  cursor: String!
}

enum InviteStatus {
  SENT
  JOINED
  EXPIRED
}

type LoginPayload {
  user: User!
}

type Member {
  id: ID!
  role: MemberRole!
  createdAt: DateTime!
  account: Account!
  user: User!
}

type MemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MemberEdge]
}

"""An edge in a connection."""
type MemberEdge {
  """The item at the end of the edge"""
  node: Member!

  """A cursor for use in pagination"""
  cursor: String!
}

"""A member can only have ONE role"""
enum MemberRole {
  OWNER
  MEMBER
}

type MutationRoot {
  """
  Create new organization account owned by the current user. Slug must be unique.
  """
  organizationCreate(input: OrganizationCreateInput!): OrganizationCreatePayload!
  login: LoginPayload!

  """
  Create new project owned by the current user. Slug must be unique for given account.
  """
  projectCreate(input: ProjectCreateInput!): ProjectCreatePayload!
  projectDelete(input: ProjectDeleteInput!): ProjectDeletePayload!

  """Create new environment variable for the targeted Environment"""
  environmentVariableCreate(input: EnvironmentVariableCreateInput!): EnvironmentVariableCreatePayload!

  """
  Update an environment variable.
  Mocked up.
  """
  environmentVariableUpdate(input: EnvironmentVariableUpdateInput!): EnvironmentVariableUpdatePayload!

  """
  Delete an environment variable.
  Mocked up.
  """
  environmentVariableDelete(input: EnvironmentVariableDeleteInput!): EnvironmentVariableDeletePayload!
}

type Organization implements Account {
  id: ID!
  slug: String!
  name: String!
  createdAt: DateTime!
  projects(after: String, before: String, first: Int, last: Int): ProjectConnection!
  invites(after: String, before: String, first: Int, last: Int): InviteConnection!
  members(after: String, before: String, first: Int, last: Int): MemberConnection!
}

type OrganizationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganizationEdge]
}

input OrganizationCreateInput {
  slug: String!
  name: String!
}

type OrganizationCreatePayload {
  organization: Organization!
  query: QueryRoot!
}

"""An edge in a connection."""
type OrganizationEdge {
  """The item at the end of the edge"""
  node: Organization!

  """A cursor for use in pagination"""
  cursor: String!
}

"""Information about pagination in a connection"""
type PageInfo {
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PersonalAccount implements Account {
  id: ID!
  slug: String!
  createdAt: DateTime!
  projects(after: String, before: String, first: Int, last: Int): ProjectConnection!
}

type Project {
  id: ID!
  slug: String!
  createdAt: DateTime!
  repository: GitRepository!
  deployments(after: String, before: String, first: Int, last: Int): DeploymentConnection!
  environments(after: String, before: String, first: Int, last: Int): EnvironmentConnection!
}

type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]
}

input ProjectCreateInput {
  accountId: ID!
  slug: String!
  repository: GitRepositoryInput!
}

type ProjectCreatePayload {
  project: Project!
  query: QueryRoot!
}

input ProjectDeleteInput {
  id: ID!
}

type ProjectDeletePayload {
  query: QueryRoot!
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge"""
  node: Project!

  """A cursor for use in pagination"""
  cursor: String!
}

type QueryRoot {
  accountBySlug(
    """slug of the account"""
    slug: String!
  ): Account

  """Give the actual connected user."""
  viewer: User

  """Get project by account slug and slug of the project itself."""
  projectByAccountSlug(
    """slug of the account"""
    accountSlug: String!

    """slug of the project"""
    projectSlug: String!
  ): Project

  """Return a list of connected git accounts."""
  connectedGitAccounts(provider: GitProvider!): [GitAccount!]!
}

type User {
  id: ID!
  name: String!
  email: String!
  avatarUrl: String
  createdAt: DateTime!
  organizations(after: String, before: String, first: Int, last: Int): OrganizationConnection!
  personalAccount: PersonalAccount!
}

